# -*- coding: utf-8 -*-
"""RAG-neo4j.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oNwl2scCcn_UitNnfxXglqcOpxHSlLF-
"""

!pip install neo4j langchain openai

!pip install --upgrade langchain langchain-community

from google.colab import userdata
OPENAI_KEY= userdata.get('openai')

from neo4j import GraphDatabase
from langchain.chat_models import ChatOpenAI
from langchain.schema import SystemMessage, HumanMessage
import os
import spacy

# Load spaCy model for NLP
nlp = spacy.load("en_core_web_sm")

# Set OpenAI API key
os.environ["OPENAI_API_KEY"] = OPENAI_KEY

# Initialize LangChain GPT-4 model
llm = ChatOpenAI(model_name="gpt-4o-mini", temperature=0.5, openai_api_key=OPENAI_KEY)

# Neo4j connection details
NEO4J_URI = "neo4j+s://22cfc53b.databases.neo4j.io"
NEO4J_USER = "neo4j"
NEO4J_PASSWORD = "4sSI49-oTDUCv2T47XQG4qHT58nIC2gpAe5h7ECG3hI"

# Establish Neo4j connection
def get_neo4j_session():
    driver = GraphDatabase.driver(NEO4J_URI, auth=(NEO4J_USER, NEO4J_PASSWORD))
    return driver.session()

# Extract keywords from user query
def extract_keywords(text):
    doc = nlp(text.lower())
    keywords = [
        token.lemma_
        for token in doc
        if token.pos_ in ["NOUN", "PROPN", "VERB", "ADJ"]  # Extract relevant words
        and not token.is_stop
        and len(token.text) > 2
    ]
    return list(set(keywords))

# Search for recipes based on query, servings, and cook time
def search_recipes(query: str, servings: int, max_cook_time: int):
    keywords = extract_keywords(query)
    if not keywords:
        return []

    keyword_conditions = " OR ".join(
        [f"toLower(r.recipe_name) CONTAINS toLower($kw{i}) OR toLower(r.directions) CONTAINS toLower($kw{i})"
         for i in range(len(keywords))]
    )

    with get_neo4j_session() as session:
        cypher_query = f"""
        MATCH (r:Recipe)-[:USES]->(i:Ingredient)
        WHERE ({keyword_conditions})
          AND r.total_minutes <= $max_cook_time
        RETURN r.recipe_name AS title, r.total_minutes AS time, r.directions AS steps
        LIMIT 5
        """

        query_params = {f"kw{i}": kw for i, kw in enumerate(keywords)}
        query_params.update({"max_cook_time": max_cook_time})

        results = session.run(cypher_query, query_params)
        recipes = [record.data() for record in results]

    return recipes

# Find closest matching recipes if no exact match is found
def find_closest_recipes(query: str, servings: int, max_cook_time: int):
    keywords = extract_keywords(query)
    if not keywords:
        return []

    with get_neo4j_session() as session:
        cypher_query = f"""
        MATCH (r:Recipe)
        RETURN r.recipe_name AS title,
               r.total_minutes AS time,
               r.directions AS steps,
               ABS(r.total_minutes - $max_cook_time) AS time_diff
        ORDER BY time_diff
        LIMIT 5
        """

        query_params = {"max_cook_time": max_cook_time}
        results = session.run(cypher_query, query_params)

        recipes = [record.data() for record in results]

    return recipes

# Generate recipe recommendations using GPT-4 (LangChain)
def generate_recipe_recommendation(query: str, servings: int, max_cook_time: int):
    recipes = search_recipes(query, servings, max_cook_time)

    if recipes:
        response_text = "Here are some recipes matching your request:\n\n"
    else:
        response_text = "I couldn't find exact matches, but here are the closest recipes:\n\n"
        recipes = find_closest_recipes(query, servings, max_cook_time)

    for r in recipes:
        response_text += (
            f"🍽 **{r['title']}**\n"
            f"⏳ Cooking Time: {r['time']} minutes\n"
            f"📜 Directions: {r['steps'][:200]}... (Click for more)\n\n"
        )

    # Use LangChain's ChatOpenAI for response generation
    messages = [
        SystemMessage(content="You are an AI assistant helping users find recipes."),
        HumanMessage(content=f"Summarize and improve the following recipe recommendations:\n{response_text}")
    ]

    ai_response = llm(messages)

    return ai_response.content

# Example queries
print(generate_recipe_recommendation("I want a quick pasta dish", 2, 30))
print(generate_recipe_recommendation("Suggest a vegetarian meal with tomatoes", 4, 45))